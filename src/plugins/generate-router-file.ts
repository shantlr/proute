import path from 'path';
import { RouterModules } from '../load-router/load-folder-tree/types';
import { formatImportPath } from '../utils/import-path';

export const GENERATED_CODE_HEADER = `// This file is generated by proute, do not edit it manually, it will be override`;

export const generateRouterFile = async (
  routerModules: RouterModules,
  outputPath: string,
) => {
  const results = [GENERATED_CODE_HEADER, ''];

  const { dir: outputDir } = path.parse(outputPath);

  const modules = routerModules.modules.map((module, index) => {
    return {
      id: module.id,
      module,
      importPath: formatImportPath(outputDir, module.id),
      varName: `$${index}`,
    };
  });
  const moduleById = new Map(modules.map((module) => [module.id, module]));

  // Generate imports
  results.push(`import { Router } from 'express';`);
  results.push(
    `import { isRouteEndpointModule, createRoute } from 'proute';`,
    '',
  );
  for (const { importPath, varName } of modules) {
    results.push(`import ${varName} from '${importPath}';`);
  }

  // Generate router
  results.push('', 'const router = Router();', '');

  // Generate router
  for (const { module, varName } of modules) {
    if (module.type === 'endpoint') {
      results.push(`if (isRouteEndpointModule(${varName})) {`);
      results.push(
        `  const route = createRoute(${varName}, { middlewares: [${module.middlewaresModuleIds.map((id) => moduleById.get(id).varName).join(', ')}] });`,
      );
      results.push(
        `  router.${module.method}('${module.expressPath}', route.handler);`,
      );
      results.push(`}`);
    }
  }

  results.push('', `export { router };`, '');

  return results.join('\n');
};

import path from 'path';
import { RouterModules } from '../load-router/load-folder-tree/types';
import { pathStat } from '../utils/stats';
import { formatImportPath } from '../utils/import-path';

export const GENERATED_BASE_CONF_HEADER = `// This file is generated by proute, do not edit it manually, it will be override`;

const extractParams = (expressPath: string) => {
  return expressPath
    .split('/')
    .filter((p) => p.startsWith(':'))
    .map((p) => {
      return p.slice(1);
    });
};
const formatFieldName = (name: string) => {
  if (/[a-zA-Z$_]([a-zA-Z0-9$_])*/.test(name)) {
    return name;
  }
  return `'${name}'`;
};

export const generateRoutes = async (
  routerModules: RouterModules,
  {
    resourcesPath,
    configPath,
    outputRoutes,
  }: {
    resourcesPath: string;
    configPath: string;
    outputRoutes: string;
  },
) => {
  const results = [GENERATED_BASE_CONF_HEADER, ''];
  results.push(`import { createResourceMap } from 'proute';`);
  results.push(`import { object, string } from 'valibot';`);

  const configStat = await pathStat(configPath);
  if (configStat?.isFile()) {
    results.push(
      `import routerConfig from '${formatImportPath(path.parse(outputRoutes).dir, configPath)}';`,
    );
  }

  const resourcesStat = await pathStat(resourcesPath);
  if (resourcesStat?.isFile()) {
    results.push(
      `import * as resources from '${formatImportPath(path.parse(outputRoutes).dir, resourcesPath)}';`,
    );

    results.push(`export const RESOURCES = createResourceMap(resources);`);
  }

  results.push('');
  results.push(`export const ROUTES = {`);

  const byMethod = routerModules.modules.reduce(
    (acc, module) => {
      if (module.type !== 'endpoint') {
        return acc;
      }
      if (!acc[module.method]) {
        acc[module.method] = [];
      }
      acc[module.method].push(module);
      return acc;
    },
    {} as Record<string, RouterModules['modules']>,
  );

  // Generate route params
  for (const method in byMethod) {
    results.push(`  ${method}: {`);
    for (const module of byMethod[method]) {
      if (module.type === 'endpoint') {
        const params = extractParams(module.expressPath);
        results.push(`    '${module.expressPath}': {`);
        results.push(`      expressPath: '${module.expressPath}',`);

        if (configStat?.isFile()) {
          results.push(`      securitySchemes: routerConfig?.securitySchemes,`);
        }

        //#region Route params
        if (params.length === 0) {
          results.push(`      params: object({}),`);
        } else {
          results.push(`      params: object({`);
          params.forEach((param) => {
            results.push(`        ${formatFieldName(param)}: string(),`);
          });
          results.push(`      }),`);
        }
        //#endregion

        results.push(`    },`);
      }
    }
    results.push(`  },`);
  }
  results.push('};', '');

  return results.join('\n');
};
